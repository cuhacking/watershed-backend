{
	"info": {
		"_postman_id": "1005e352-6c74-44c3-8031-a8916a06f580",
		"name": "Watershed",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0. Status",
			"item": [
				{
					"name": "0.1 Check API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api"
							]
						}
					},
					"response": []
				},
				{
					"name": "0.2 Check Database Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/status",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Users",
			"item": [
				{
					"name": "1.1 Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Check Confirmation Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has a confirmation code\", () => {\r",
									"    pm.expect(pm.response.json()).not.to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/test/getConfirmTokens",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"test",
								"getConfirmTokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 Resend Confirmation Token",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ryanly.rl1@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user/resendConfirmation",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user",
								"resendConfirmation"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5 Get Confirmation Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has a confirmation code\", () => {\r",
									"    pm.expect(jsonData).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"confirmationToken\", jsonData[0].token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/test/getConfirmTokens",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"test",
								"getConfirmTokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6 Confirm Account",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{confirmationToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user/confirm",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7 Request Password Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Note, we expect this to return a 500"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/reset",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.8 Get Reset Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has a reset code\", () => {\r",
									"    pm.expect(jsonData).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"resetToken\", jsonData[0].token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/test/getResetTokens",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"test",
								"getResetTokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.9 Change Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{resetToken}}\",\r\n    \"password\": \"newPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/performReset",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"performReset"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.10 Login with New Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"newPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.11 Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Array should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.12 Get Created User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/user/{{userId}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.13 Delete Created User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.get(\"variable_key\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user/{{userId}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.14 Check Deleted User No Longer Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/user/{{userId}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Auth",
			"item": [
				{
					"name": "2.1 Create Organizer User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Protected Enpoint Not Logged In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer blah",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 Protected Enpoint Logged In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.6 Refresh Token Can't Be Used For Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REFRESH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.7 Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access Token is returned\", () => {\r",
									"        pm.expect(jsonData).to.have.property(\"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"NEW_ACCESS_TOKEN\", jsonData.accessToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{REFRESH_TOKEN}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/refresh",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.8 Protected Enpoint New Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{NEW_ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.9 Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{REFRESH_TOKEN}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/logout",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.7 Refresh Access Token Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{REFRESH_TOKEN}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/refresh",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.9 Invalidate Tokens",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/invalidateTokens",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"invalidateTokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.10 Protected Enpoint After Logout fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, [1000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{NEW_ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.11 Create Hacker User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"hacker@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.12 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"hacker@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.13 Protected Enpoint Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Applications",
			"item": [
				{
					"name": "4.1 Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"app@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"app@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3 Create Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"Application\",\n    \"pronouns\": \"it\",\n    \"email\": \"test@test.com\",\n    \"studyLevel\": \"yes\",\n    \"program\": \"yes\",\n    \"question1\": \"answer\",\n    \"question2\": \"answer\",\n    \"question3\": \"answer\",\n    \"hackathonNumber\": 1,\n    \"website\": \"no\",\n\"completed\": false\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": "/C:/Users/Ryan/Documents/Resume/RyanLyResume.pdf"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.4 Get Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expected = {\r",
									"    \"firstName\": \"Test\",\r",
									"    \"lastName\": \"Application\",\r",
									"    \"pronouns\": \"it\",\r",
									"    \"email\": \"test@test.com\",\r",
									"    \"studyLevel\": \"yes\",\r",
									"    \"program\": \"yes\",\r",
									"    \"question1\": \"answer\",\r",
									"    \"question2\": \"answer\",\r",
									"    \"question3\": \"answer\",\r",
									"    \"hackathonNumber\": 1,\r",
									"    \"website\": \"no\",\r",
									"    \"completed\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for(const key in expected) {\r",
									"        pm.expect(jsonData[key]).to.eql(expected[key]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/application/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.5 Edit Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n\"question1\": \"newAnswer\"\n}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.6 Get Application (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expected = {\r",
									"    \"firstName\": \"Test\",\r",
									"    \"lastName\": \"Application\",\r",
									"    \"pronouns\": \"it\",\r",
									"    \"email\": \"test@test.com\",\r",
									"    \"studyLevel\": \"yes\",\r",
									"    \"program\": \"yes\",\r",
									"    \"question1\": \"newAnswer\",\r",
									"    \"question2\": \"answer\",\r",
									"    \"question3\": \"answer\",\r",
									"    \"hackathonNumber\": 1,\r",
									"    \"website\": \"no\",\r",
									"    \"completed\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for(const key in expected) {\r",
									"        pm.expect(jsonData[key]).to.eql(expected[key]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/application/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.7 Get All Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expected = {\r",
									"    \"firstName\": \"Test\",\r",
									"    \"lastName\": \"Application\",\r",
									"    \"pronouns\": \"it\",\r",
									"    \"email\": \"test@test.com\",\r",
									"    \"studyLevel\": \"yes\",\r",
									"    \"program\": \"yes\",\r",
									"    \"question1\": \"newAnswer\",\r",
									"    \"question2\": \"answer\",\r",
									"    \"question3\": \"answer\",\r",
									"    \"hackathonNumber\": 1,\r",
									"    \"website\": \"no\",\r",
									"    \"completed\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for(const key in expected) {\r",
									"        pm.expect(jsonData[0][key]).to.eql(expected[key]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.8 Edit Application and Submit Incomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n\"shortAnswer2\": \"anotherNewAnswer\",\n\"resumePath\": \"\",\n\"resumeName\":\"\",\n\"completed\": true\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": [],
									"disabled": true
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.9 Edit Application and Submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n\"shortAnswer2\": \"anotherNewAnswer\",\n\"resumePath\": \"\",\n\"resumeName\":\"\",\n\"completed\": true,\n\"school\": \"carleton\",\n\"eventsNumber\": 1,\n\"willingToInterview\": false,\n\"country\": \"Canada\"\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": [],
									"disabled": true
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.10 Can't Edit Submitted Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"Application\",\n    \"pronouns\": \"it\",\n    \"email\": \"test@test.com\",\n    \"levelOfStudy\": \"yes\",\n    \"program\": \"yes\",\n    \"shortAnswer1\": \"answer\",\n    \"shortAnswer2\": \"answer\",\n    \"shortAnswer3\": \"answer\",\n    \"numHackathons\": 1,\n    \"siteUrl\": \"no\"\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": [],
									"disabled": true
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.11 Verify Final Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expected = {\r",
									"    \"completed\": true,\r",
									"    \"firstName\": \"Test\",\r",
									"    \"lastName\": \"Application\",\r",
									"    \"pronouns\": \"it\",\r",
									"    \"email\": \"test@test.com\",\r",
									"    \"school\": \"carleton\",\r",
									"    \"studyLevel\": \"yes\",\r",
									"    \"program\": \"yes\",\r",
									"    \"question1\": \"newAnswer\",\r",
									"    \"question2\": \"answer\",\r",
									"    \"question3\": \"answer\",\r",
									"    \"hackathonNumber\": 1,\r",
									"    \"eventsNumber\": 1,\r",
									"    \"website\": \"no\",\r",
									"    \"github\": null,\r",
									"    \"linkedin\": null,\r",
									"    \"other\": null,\r",
									"    \"resumeName\": \"\",\r",
									"    \"country\": \"Canada\",\r",
									"    \"willingToInterview\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for(const key in expected) {\r",
									"        pm.expect(jsonData[key]).to.eql(expected[key]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/application/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application",
								"my"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}