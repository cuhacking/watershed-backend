{
	"info": {
		"_postman_id": "89de609b-c6c1-49d2-801f-bd85ce9509de",
		"name": "Watershed",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0. Status",
			"item": [
				{
					"name": "0.1 Check API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api"
							]
						}
					},
					"response": []
				},
				{
					"name": "0.2 Check Database Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/status",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Users",
			"item": [
				{
					"name": "1.1 Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7 Request Password Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Note, we expect this to return a 500"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/reset",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.8 Get Reset Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has a reset code\", () => {\r",
									"    pm.expect(jsonData).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"resetToken\", jsonData[0].token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/test/getResetTokens",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"test",
								"getResetTokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.9 Change Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{resetToken}}\",\r\n    \"password\": \"newPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/performReset",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"performReset"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.10 Login with New Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"password@test.com\",\r\n    \"password\": \"newPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.11 Get Created User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/user/{{userId}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Auth",
			"item": [
				{
					"name": "2.1 Create Organizer User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"auth@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer blah",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"auth@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 Refresh Token Can't Be Used For Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REFRESH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access Token is returned\", () => {\r",
									"        pm.expect(jsonData).to.have.property(\"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"NEW_ACCESS_TOKEN\", jsonData.accessToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{REFRESH_TOKEN}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/refresh",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.6 Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{REFRESH_TOKEN}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/logout",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.7 Refresh Access Token Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{REFRESH_TOKEN}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/refresh",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.8 Invalidate Tokens",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/invalidateTokens",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"invalidateTokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.9 Create Hacker User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"HaCKer@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.10 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"hacker@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.11 Protected Enpoint Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Team",
			"item": [
				{
					"name": "3.1 Create User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"USER_1_ACCESS_TOKEN\", jsonData.accessToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"team1@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Create User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"USER_2_ACCESS_TOKEN\", jsonData.accessToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"team2@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 Create User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"USER_3_ACCESS_TOKEN\", jsonData.accessToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"team3@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Create User 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"USER_4_ACCESS_TOKEN\", jsonData.accessToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"team4@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Create User 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"USER_5_ACCESS_TOKEN\", jsonData.accessToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"team5@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 Create Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"TEAM_ID\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test Team\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4 Get Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Test Team\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/team",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5. Create an Invite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"TEAM_INVITE\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"team2@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/createInvite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"createInvite"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.6 Revoke an Invite",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/team/invites/{{TEAM_INVITE}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"invites",
								"{{TEAM_INVITE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.7 Join Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_2_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inviteId\": \"{{TEAM_INVITE}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/Uw52zdla/join",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"Uw52zdla",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.8 Create an Invite (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"INVITE_ID\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"team2@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/createInvite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"createInvite"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Get My Invites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].uuid).to.eql(pm.environment.get(\"INVITE_ID\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_2_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/team/invites",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Get Team's Invites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].uuid).to.eql(pm.environment.get(\"INVITE_ID\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/team/invites/{{TEAM_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"invites",
								"{{TEAM_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Join Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_2_ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inviteId\": \"{{INVITE_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/{{TEAM_ID}}/join",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"{{TEAM_ID}}",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get My Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Test Team\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_2_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/team/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Leave Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_2_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/team/leave",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"leave"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get My Team (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_2_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/team/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Change Team Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New Name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/{{TEAM_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"{{TEAM_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get My Team (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"New Name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/team/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5. Create an Invite (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"TEAM_INVITE_2\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"team2@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/createInvite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"createInvite"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5. Create an Invite (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"TEAM_INVITE_3\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"team3@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/createInvite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"createInvite"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5. Create an Invite (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"TEAM_INVITE_4\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"team4@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/createInvite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"createInvite"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5. Create an Invite (4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"TEAM_INVITE_5\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_1_ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"team5@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/createInvite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"createInvite"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Join Team (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_2_ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inviteId\": \"{{TEAM_INVITE_2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/{{TEAM_ID}}/join",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"{{TEAM_ID}}",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Join Team (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_3_ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inviteId\": \"{{TEAM_INVITE_3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/{{TEAM_ID}}/join",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"{{TEAM_ID}}",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Join Team (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_4_ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inviteId\": \"{{TEAM_INVITE_4}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/{{TEAM_ID}}/join",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"{{TEAM_ID}}",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Join Team Full",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_5_ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inviteId\": \"{{TEAM_INVITE_5}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/team/{{TEAM_ID}}/join",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"team",
								"{{TEAM_ID}}",
								"join"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Applications",
			"item": [
				{
					"name": "4.1 Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", pm.response.json().uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"app@test.com\",\r\n    \"password\": \"password\",\r\n    \"role\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/user",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"app@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3 Create Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"Application\",\n    \"pronouns\": \"it\",\n    \"email\": \"test@test.com\",\n    \"studyLevel\": \"yes\",\n    \"program\": \"yes\",\n    \"question1\": \"answer\",\n    \"question2\": \"answer\",\n    \"question3\": \"answer\",\n    \"hackathonNumber\": 1,\n    \"website\": \"no\",\n\"completed\": false\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": "/C:/Users/Ryan/Documents/Resume/RyanLyResume.pdf"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.4 Get Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expected = {\r",
									"    \"firstName\": \"Test\",\r",
									"    \"lastName\": \"Application\",\r",
									"    \"pronouns\": \"it\",\r",
									"    \"email\": \"test@test.com\",\r",
									"    \"studyLevel\": \"yes\",\r",
									"    \"program\": \"yes\",\r",
									"    \"question1\": \"answer\",\r",
									"    \"question2\": \"answer\",\r",
									"    \"question3\": \"answer\",\r",
									"    \"hackathonNumber\": 1,\r",
									"    \"website\": \"no\",\r",
									"    \"completed\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for(const key in expected) {\r",
									"        pm.expect(jsonData[key]).to.eql(expected[key]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/application/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.5 Edit Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n\"question1\": \"newAnswer\"\n}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.6 Get Application (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expected = {\r",
									"    \"firstName\": \"Test\",\r",
									"    \"lastName\": \"Application\",\r",
									"    \"pronouns\": \"it\",\r",
									"    \"email\": \"test@test.com\",\r",
									"    \"studyLevel\": \"yes\",\r",
									"    \"program\": \"yes\",\r",
									"    \"question1\": \"newAnswer\",\r",
									"    \"question2\": \"answer\",\r",
									"    \"question3\": \"answer\",\r",
									"    \"hackathonNumber\": 1,\r",
									"    \"website\": \"no\",\r",
									"    \"completed\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for(const key in expected) {\r",
									"        pm.expect(jsonData[key]).to.eql(expected[key]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/application/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.7 Edit Application and Submit Incomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n\"shortAnswer2\": \"anotherNewAnswer\",\n\"resumePath\": \"\",\n\"resumeName\":\"\",\n\"completed\": true\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": [],
									"disabled": true
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.8 Edit Application and Submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n\"shortAnswer2\": \"anotherNewAnswer\",\n\"resumePath\": \"\",\n\"resumeName\":\"\",\n\"completed\": true,\n\"school\": \"carleton\",\n\"eventsNumber\": 1,\n\"willingToInterview\": false,\n\"country\": \"Canada\"\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": [],
									"disabled": true
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.9 Can't Edit Submitted Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"Application\",\n    \"pronouns\": \"it\",\n    \"email\": \"test@test.com\",\n    \"levelOfStudy\": \"yes\",\n    \"program\": \"yes\",\n    \"shortAnswer1\": \"answer\",\n    \"shortAnswer2\": \"answer\",\n    \"shortAnswer3\": \"answer\",\n    \"numHackathons\": 1,\n    \"siteUrl\": \"no\"\n}",
									"type": "text"
								},
								{
									"key": "resume",
									"type": "file",
									"src": [],
									"disabled": true
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/application",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.10 Verify Final Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expected = {\r",
									"    \"completed\": true,\r",
									"    \"firstName\": \"Test\",\r",
									"    \"lastName\": \"Application\",\r",
									"    \"pronouns\": \"it\",\r",
									"    \"email\": \"test@test.com\",\r",
									"    \"school\": \"carleton\",\r",
									"    \"studyLevel\": \"yes\",\r",
									"    \"program\": \"yes\",\r",
									"    \"question1\": \"newAnswer\",\r",
									"    \"question2\": \"answer\",\r",
									"    \"question3\": \"answer\",\r",
									"    \"hackathonNumber\": 1,\r",
									"    \"eventsNumber\": 1,\r",
									"    \"website\": \"no\",\r",
									"    \"github\": null,\r",
									"    \"linkedin\": null,\r",
									"    \"other\": null,\r",
									"    \"resumeName\": \"\",\r",
									"    \"country\": \"Canada\",\r",
									"    \"willingToInterview\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for(const key in expected) {\r",
									"        pm.expect(jsonData[key]).to.eql(expected[key]);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/application/my",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"application",
								"my"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Raven's Quest",
			"item": [
				{
					"name": "5.0 Create Organizer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ravensQuest@test.com\",\r\n    \"password\": \"password\",\r\n    \"discordId\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/test/adminUser",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"test",
								"adminUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.1 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);\r",
									"pm.environment.set(\"DISCORD_ID\", \"1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ravensQuest@test.com\",\r\n    \"password\": \"password\",\r\n    \"discordId\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2 Load Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"0\": {\r\n        \"0\": {\r\n            \"question\": \"track 0 question 0\",\r\n            \"answer\": \"answer 0-0\"\r\n        },\r\n        \"1\": {\r\n            \"question\": \"track 0 question 1\",\r\n            \"answer\": \"answer 0-1\"\r\n        },\r\n        \"2\": {\r\n            \"question\": \"track 0 question 2\",\r\n            \"answer\": \"answer 0-2\"\r\n        },\r\n        \"3\": {\r\n            \"question\": \"track 0 question 3\",\r\n            \"answer\": \"answer 0-3\"\r\n        },\r\n        \"snowmanName\": \"name0\"\r\n    },\r\n    \"1\": {\r\n        \"0\": {\r\n            \"question\": \"track 1 question 0\",\r\n            \"answer\": \"answer 1-0\"\r\n        },\r\n        \"1\": {\r\n            \"question\": \"track 1 question 1\",\r\n            \"answer\": \"answer 1-1\"\r\n        },\r\n        \"2\": {\r\n            \"question\": \"track 1 question 2\",\r\n            \"answer\": \"answer 1-2\"\r\n        },\r\n        \"3\": {\r\n            \"question\": \"track 1 question 3\",\r\n            \"answer\": \"answer 1-3\"\r\n        },\r\n        \"snowmanName\": \"name1\"\r\n    },\r\n    \"2\": {\r\n        \"0\": {\r\n            \"question\": \"track 2 question 0\",\r\n            \"answer\": \"answer 2-0\"\r\n        },\r\n        \"1\": {\r\n            \"question\": \"track 2 question 1\",\r\n            \"answer\": \"answer 2-1\"\r\n        },\r\n        \"2\": {\r\n            \"question\": \"track 2 question 2\",\r\n            \"answer\": \"answer 2-2\"\r\n        },\r\n        \"3\": {\r\n            \"question\": \"track 2 question 3\",\r\n            \"answer\": \"answer 2-3\"\r\n        },\r\n        \"snowmanName\": \"name2\"\r\n    },\r\n    \"3\": {\r\n        \"0\": {\r\n            \"question\": \"track 3 question 0\",\r\n            \"answer\": \"answer 3-0\"\r\n        },\r\n        \"1\": {\r\n            \"question\": \"track 3 question 1\",\r\n            \"answer\": \"answer 3-1\"\r\n        },\r\n        \"2\": {\r\n            \"question\": \"track 3 question 2\",\r\n            \"answer\": \"answer 3-2\"\r\n        },\r\n        \"3\": {\r\n            \"question\": \"track 3 question 3\",\r\n            \"answer\": \"answer 3-3\"\r\n        },\r\n        \"snowmanName\": \"name3\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/refreshQuestions",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"refreshQuestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.3 Get Question Before Start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/question/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"question",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.4 Start Raven's Quest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/start",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.5 Get Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"track 0 question 0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/question/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"question",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.6 Switch Track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"track\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/switchTracks",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"switchTracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.7 Get Question From New Track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"track 1 question 0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/question/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"question",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.8 Submit Wrong Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/submit",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.9 Submit Correct Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.track).to.eql(\"1\");\r",
									"    pm.expect(jsonData.nextQuestion).to.eql(\"track 1 question 1\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 1-0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/submit",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.10 Get Question After Correct Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"track 1 question 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/question/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"question",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.11 Switch Back To Original Track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"track\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/switchTracks",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"switchTracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.12 Get Question After Switching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"track 0 question 0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/question/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"question",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.13 Submit Correct Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.track).to.eql(\"0\");\r",
									"    pm.expect(jsonData.nextQuestion).to.eql(\"track 0 question 1\");\r",
									"    pm.expect(jsonData.progress).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/submit",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.14 Get Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check progress is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.track0).to.eql(1);\r",
									"    pm.expect(jsonData.track1).to.eql(1);\r",
									"    pm.expect(jsonData.track2).to.eql(0);\r",
									"    pm.expect(jsonData.track3).to.eql(0);\r",
									"    pm.expect(jsonData.currentTrack).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/progress/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"progress",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.15 Submit Correct Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.track).to.eql(\"0\");\r",
									"    pm.expect(jsonData.progress).to.eql(2);\r",
									"    pm.expect(jsonData.nextQuestion).to.eql(\"track 0 question 2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/submit",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.16 Submit Correct Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.track).to.eql(\"0\");\r",
									"    pm.expect(jsonData.progress).to.eql(3);\r",
									"    pm.expect(jsonData.nextQuestion).to.eql(\"track 0 question 3\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/submit",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.17 Submit Correct Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.track).to.eql(\"0\");\r",
									"    pm.expect(jsonData.progress).to.eql(\"completed\");\r",
									"    pm.expect(jsonData.snowmanName).to.eql(\"name0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/submit",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.18 Check Progress After Completing Track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check progress is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.track0).to.eql(\"Completed\");\r",
									"    pm.expect(jsonData.track1).to.eql(1);\r",
									"    pm.expect(jsonData.track2).to.eql(0);\r",
									"    pm.expect(jsonData.track3).to.eql(0);\r",
									"    pm.expect(jsonData.currentTrack).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/progress/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"progress",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.19 Get Question After Completing Track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Track completed!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/question/{{DISCORD_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"question",
								"{{DISCORD_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.20 Submit After Completed Track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Track is already complete! Please switch to a different track.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{DISCORD_ID}}\",\r\n    \"answer\": \"answer 0-3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/ravensQuest/submit",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"ravensQuest",
								"submit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Events",
			"item": [
				{
					"name": "6.0 Create Organizer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"organizer@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/test/adminUser",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"test",
								"adminUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.1 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object should be returned\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Access and Refresh Tokens are returned\", () => {\r",
									"        pm.expect(jsonData).to.have.all.keys(\"uuid\", \"refreshToken\", \"accessToken\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\", jsonData.accessToken.token);\r",
									"pm.environment.set(\"REFRESH_TOKEN\", jsonData.refreshToken.token);\r",
									"pm.environment.set(\"DISCORD_ID\", \"1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"organizer@test.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.2 Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Created event is correct\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"event1\");\r",
									"    pm.expect(jsonData.type).to.eql(\"social\");\r",
									"    pm.expect(jsonData.location).to.eql(\"place\");\r",
									"    pm.expect(jsonData.locationName).to.eql(\"discord\");\r",
									"    pm.expect(jsonData.host).to.eql(\"me\");\r",
									"    pm.expect(jsonData.description).to.eql(\"none\");\r",
									"    pm.expect(jsonData.startTime).to.eql(\"2020-01-21T05:00:00.000Z\");\r",
									"    pm.expect(jsonData.endTime).to.eql(\"2020-01-21T06:00:00.000Z\");\r",
									"    pm.expect(jsonData.resources[0].title).to.eql(\"resource1\");\r",
									"    pm.expect(jsonData.resources[0].link).to.eql(\"link\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"EVENT_ID_1\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"event1\",\r\n    \"type\": \"social\",\r\n    \"location\": \"place\",\r\n    \"locationName\": \"discord\",\r\n    \"host\": \"me\",\r\n    \"description\": \"none\",\r\n    \"startTime\": \"2020-01-21T05:00:00.000Z\",\r\n    \"endTime\": \"2020-01-21T06:00:00.000Z\",\r\n    \"resources\": [\r\n        {\r\n            \"title\": \"resource1\",\r\n            \"link\": \"link\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.3 Create Event (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Created event is correct\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"event2\");\r",
									"    pm.expect(jsonData.type).to.eql(\"social\");\r",
									"    pm.expect(jsonData.location).to.eql(\"place\");\r",
									"    pm.expect(jsonData.locationName).to.eql(\"discord\");\r",
									"    pm.expect(jsonData.host).to.eql(\"me\");\r",
									"    pm.expect(jsonData.description).to.eql(\"none\");\r",
									"    pm.expect(jsonData.startTime).to.eql(\"2020-01-21T05:00:00.000Z\");\r",
									"    pm.expect(jsonData.endTime).to.eql(\"2020-01-21T06:00:00.000Z\");\r",
									"    pm.expect(jsonData.resources[0].title).to.eql(\"resource2\");\r",
									"    pm.expect(jsonData.resources[0].link).to.eql(\"link2\");\r",
									"    pm.expect(jsonData.resources[1].title).to.eql(\"resource3\");\r",
									"    pm.expect(jsonData.resources[1].link).to.eql(\"link3\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"EVENT_ID_2\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"event2\",\r\n    \"type\": \"social\",\r\n    \"location\": \"place\",\r\n    \"locationName\": \"discord\",\r\n    \"host\": \"me\",\r\n    \"description\": \"none\",\r\n    \"startTime\": \"2020-01-21T05:00:00.000Z\",\r\n    \"endTime\": \"2020-01-21T06:00:00.000Z\",\r\n    \"resources\": [\r\n        {\r\n            \"title\": \"resource2\",\r\n            \"link\": \"link2\"\r\n        },\r\n        {\r\n            \"title\": \"resource3\",\r\n            \"link\": \"link3\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.4 Get Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Event 1 is correct\", function () {\r",
									"    pm.expect(jsonData[0].title).to.eql(\"event1\");\r",
									"    pm.expect(jsonData[0].type).to.eql(\"social\");\r",
									"    pm.expect(jsonData[0].location).to.eql(\"place\");\r",
									"    pm.expect(jsonData[0].locationName).to.eql(\"discord\");\r",
									"    pm.expect(jsonData[0].host).to.eql(\"me\");\r",
									"    pm.expect(jsonData[0].description).to.eql(\"none\");\r",
									"    pm.expect(jsonData[0].startTime).to.eql(\"2020-01-21T05:00:00.000Z\");\r",
									"    pm.expect(jsonData[0].endTime).to.eql(\"2020-01-21T06:00:00.000Z\");\r",
									"    pm.expect(jsonData[0].resources[0].title).to.eql(\"resource1\");\r",
									"    pm.expect(jsonData[0].resources[0].link).to.eql(\"link\");\r",
									"});\r",
									"\r",
									"pm.test(\"Event 2 is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].title).to.eql(\"event2\");\r",
									"    pm.expect(jsonData[1].type).to.eql(\"social\");\r",
									"    pm.expect(jsonData[1].location).to.eql(\"place\");\r",
									"    pm.expect(jsonData[1].locationName).to.eql(\"discord\");\r",
									"    pm.expect(jsonData[1].host).to.eql(\"me\");\r",
									"    pm.expect(jsonData[1].description).to.eql(\"none\");\r",
									"    pm.expect(jsonData[1].startTime).to.eql(\"2020-01-21T05:00:00.000Z\");\r",
									"    pm.expect(jsonData[1].endTime).to.eql(\"2020-01-21T06:00:00.000Z\");\r",
									"    pm.expect(jsonData[1].resources[0].title).to.eql(\"resource2\");\r",
									"    pm.expect(jsonData[1].resources[0].link).to.eql(\"link2\");\r",
									"    pm.expect(jsonData[1].resources[1].title).to.eql(\"resource3\");\r",
									"    pm.expect(jsonData[1].resources[1].link).to.eql(\"link3\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/event",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.5 Get Specific Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Event is correct\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"event1\");\r",
									"    pm.expect(jsonData.type).to.eql(\"social\");\r",
									"    pm.expect(jsonData.location).to.eql(\"place\");\r",
									"    pm.expect(jsonData.locationName).to.eql(\"discord\");\r",
									"    pm.expect(jsonData.host).to.eql(\"me\");\r",
									"    pm.expect(jsonData.description).to.eql(\"none\");\r",
									"    pm.expect(jsonData.startTime).to.eql(\"2020-01-21T05:00:00.000Z\");\r",
									"    pm.expect(jsonData.endTime).to.eql(\"2020-01-21T06:00:00.000Z\");\r",
									"    pm.expect(jsonData.resources[0].title).to.eql(\"resource1\");\r",
									"    pm.expect(jsonData.resources[0].link).to.eql(\"link\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/event/{{EVENT_ID_1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"{{EVENT_ID_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.6 Edit Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Edited event is correct\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"newTitle\");\r",
									"    pm.expect(jsonData.type).to.eql(\"social\");\r",
									"    pm.expect(jsonData.location).to.eql(\"place\");\r",
									"    pm.expect(jsonData.locationName).to.eql(\"discord\");\r",
									"    pm.expect(jsonData.host).to.eql(\"me\");\r",
									"    pm.expect(jsonData.description).to.eql(\"none\");\r",
									"    pm.expect(jsonData.startTime).to.eql(\"2020-01-21T05:00:00.000Z\");\r",
									"    pm.expect(jsonData.endTime).to.eql(\"2020-01-21T06:00:00.000Z\");\r",
									"    pm.expect(jsonData.resources[0].title).to.eql(\"resource1\");\r",
									"    pm.expect(jsonData.resources[0].link).to.eql(\"link\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"newTitle\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event/{{EVENT_ID_1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"{{EVENT_ID_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.7 Favourite Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{EVENT_ID_1}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event/favourite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"favourite"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.8 Get Favourite Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Got favourite event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"EVENT_ID_1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/api/event/favourites",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"favourites"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.7 Favourite Event (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{EVENT_ID_2}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event/favourite",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"favourite"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.8 Get Favourite Event (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Got first favourite event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"EVENT_ID_1\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Got second favourite event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].id).to.eql(pm.environment.get(\"EVENT_ID_2\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{EVENT_ID_2}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event/favourites",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"favourites"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.9 Remove Favourite",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{EVENT_ID_2}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event/favourites",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"favourites"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.10 Get Favourite Event (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Favourite event is still there\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"EVENT_ID_1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/event/favourites",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"event",
								"favourites"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}